// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    using System;
    using System.Buffers;
    using MessagePack;

    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(4)
            {
                { typeof(global::MasterMemory.Tests.Sample), 0 },
                { typeof(global::MasterMemory.Tests.SkillMaster), 1 },
                { typeof(global::MasterMemory.Tests.TestStructures.TestMaster), 2 },
                { typeof(global::MasterMemory.Tests.UserLevel), 3 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new MessagePack.Formatters.MasterMemory.Tests.SampleFormatter();
                case 1: return new MessagePack.Formatters.MasterMemory.Tests.SkillMasterFormatter();
                case 2: return new MessagePack.Formatters.MasterMemory.Tests.TestStructures.TestMasterFormatter();
                case 3: return new MessagePack.Formatters.MasterMemory.Tests.UserLevelFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name




// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.MasterMemory.Tests
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class SampleFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MasterMemory.Tests.Sample>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public SampleFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Id", 0 },
                { "Age", 1 },
                { "FirstName", 2 },
                { "LastName", 3 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Id"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Age"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("FirstName"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("LastName"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::MasterMemory.Tests.Sample value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Id);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.Write(value.Age);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.FirstName, options);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.LastName, options);
        }

        public global::MasterMemory.Tests.Sample Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Id__ = default(int);
            var __Age__ = default(int);
            var __FirstName__ = default(string);
            var __LastName__ = default(string);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Id__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Age__ = reader.ReadInt32();
                        break;
                    case 2:
                        __FirstName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __LastName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MasterMemory.Tests.Sample(__Id__, __Age__, __FirstName__, __LastName__);
            ____result.Id = __Id__;
            ____result.Age = __Age__;
            ____result.FirstName = __FirstName__;
            ____result.LastName = __LastName__;
            return ____result;
        }
    }

    public sealed class SkillMasterFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MasterMemory.Tests.SkillMaster>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public SkillMasterFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "SkillId", 0 },
                { "SkillLevel", 1 },
                { "AttackPower", 2 },
                { "SkillName", 3 },
                { "Description", 4 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("SkillId"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("SkillLevel"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("AttackPower"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("SkillName"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Description"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::MasterMemory.Tests.SkillMaster value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(5);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.SkillId);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.Write(value.SkillLevel);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.Write(value.AttackPower);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.SkillName, options);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Description, options);
        }

        public global::MasterMemory.Tests.SkillMaster Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __SkillId__ = default(int);
            var __SkillLevel__ = default(int);
            var __AttackPower__ = default(int);
            var __SkillName__ = default(string);
            var __Description__ = default(string);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __SkillId__ = reader.ReadInt32();
                        break;
                    case 1:
                        __SkillLevel__ = reader.ReadInt32();
                        break;
                    case 2:
                        __AttackPower__ = reader.ReadInt32();
                        break;
                    case 3:
                        __SkillName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Description__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MasterMemory.Tests.SkillMaster(__SkillId__, __SkillLevel__, __AttackPower__, __SkillName__, __Description__);
            ____result.SkillId = __SkillId__;
            ____result.SkillLevel = __SkillLevel__;
            ____result.AttackPower = __AttackPower__;
            ____result.SkillName = __SkillName__;
            ____result.Description = __Description__;
            return ____result;
        }
    }

    public sealed class UserLevelFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MasterMemory.Tests.UserLevel>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public UserLevelFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Level", 0 },
                { "Exp", 1 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Level"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Exp"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::MasterMemory.Tests.UserLevel value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Level);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.Write(value.Exp);
        }

        public global::MasterMemory.Tests.UserLevel Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Level__ = default(int);
            var __Exp__ = default(int);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Level__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Exp__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MasterMemory.Tests.UserLevel(__Level__, __Exp__);
            ____result.Level = __Level__;
            ____result.Exp = __Exp__;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.MasterMemory.Tests.TestStructures
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class TestMasterFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MasterMemory.Tests.TestStructures.TestMaster>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public TestMasterFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "TestID", 0 },
                { "Value", 1 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("TestID"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Value"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::MasterMemory.Tests.TestStructures.TestMaster value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.TestID);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.Write(value.Value);
        }

        public global::MasterMemory.Tests.TestStructures.TestMaster Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __TestID__ = default(int);
            var __Value__ = default(int);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __TestID__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Value__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MasterMemory.Tests.TestStructures.TestMaster(__TestID__, __Value__);
            ____result.TestID = __TestID__;
            ____result.Value = __Value__;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name


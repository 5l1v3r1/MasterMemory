<#@ template debug="false" hostspecific="false" linePragmas="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// <auto-generated />
<#= Using #>

namespace <#= Namespace #>
{
   public sealed class <#= ClassName #> : MemoryDatabaseBase
   {
<# foreach(var item in GenerationContexts) { #>
        public <#= item.ClassName #>Table <#= item.ClassName #>Table { get; private set; }
<# } #>

        public <#= ClassName #>(
<# for(var i = 0; i < GenerationContexts.Length; i++) { var item = GenerationContexts[i]; #>
            <#= item.ClassName #>Table <#= item.ClassName #>Table<#= (i == GenerationContexts.Length - 1) ? "" : "," #>
<# } #>
        )
        {
<# for(var i = 0; i < GenerationContexts.Length; i++) { var item = GenerationContexts[i]; #>
            this.<#= item.ClassName #>Table = <#= item.ClassName #>Table;
<# } #>
        }

        public <#= ClassName #>(byte[] databaseBinary, bool internString = true, MessagePack.IFormatterResolver formatterResolver = null)
            : base(databaseBinary, internString, formatterResolver)
        {
        }

        protected override void Init(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options)
        {
<# foreach(var item in GenerationContexts) { #>
            this.<#= item.ClassName #>Table = ExtractTableData<<#= item.ClassName #>, <#= item.ClassName #>Table>(header, databaseBinary, options, xs => new <#= item.ClassName #>Table(xs));
<# } #>
        }

        public <#= PrefixClassName #>ImmutableBuilder ToImmutableBuilder()
        {
            return new <#= PrefixClassName #>ImmutableBuilder(this);
        }

        public <#= PrefixClassName #>DatabaseBuilder ToDatabaseBuilder()
        {
            var builder = new <#= PrefixClassName #>DatabaseBuilder();
<# foreach(var item in GenerationContexts) { #>
            builder.Append(this.<#= item.ClassName #>Table.GetRawDataUnsafe());
<# } #>
            return builder;
        }
    }
}
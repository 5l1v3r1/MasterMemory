<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ZeroFormatter;
using ZeroFormatter.Formatters;
using ZeroFormatter.Internal;

namespace MasterMemory.Internal
{
    public static class KeyTupleComparer
    {
        internal static readonly Type[] Types = new[]
        {
            null, // 0
            null, // 1
            typeof(KeyTupleComparer<,>),
            typeof(KeyTupleComparer<,,>),
            typeof(KeyTupleComparer<,,,>),
            typeof(KeyTupleComparer<,,,,>),
            typeof(KeyTupleComparer<,,,,,>),
            typeof(KeyTupleComparer<,,,,,,>)
        };
    }

<# for(var i = 2; i<= 7; i++ ) {
    var t = string.Join(", ", Enumerable.Range(1, i).Select(x => "T" + x));
#>

    public class KeyTupleComparer<<#= t #>> : IComparer<KeyTuple<<#= t #>>>
    {
<# for(var j = 1; j <= i; j++ ) { #>
        readonly IComparer<T<#= j#>> comparer<#= j #> = MasterMemoryComparer<T<#= j #>>.Default;
<# } #>

        readonly Func<KeyTuple<<#= t #>>, KeyTuple<<#= t #>>, int> compare;

        public KeyTupleComparer(int compareKeyNumber) // -1 is all.
        {
            if (compareKeyNumber == -1) compare = CompareAll;
            switch (compareKeyNumber)
            {
<# for(var j = 1; j <= i; j++ ) { #>
                case <#= j #>:
                    compare = Compare<#= j #>;
                    break;
<# } #>
                default:
                    compare = CompareAll;
                    break;
            }
        }

        public int Compare(KeyTuple<<#= t #>> x, KeyTuple<<#= t #>> y)
        {
            return compare(x, y);
        }

<# for(var j = 1; j <= i; j++ ) { #>

        int Compare<#= j #>(KeyTuple<<#= t #>> x, KeyTuple<<#= t #>> y)
        {
            return comparer<#= j #>.Compare(x.Item<#= j #>, y.Item<#= j #>);
        }

<# } #>

        int CompareAll(KeyTuple<<#= t #>> x, KeyTuple<<#= t #>> y)
        {
            int res;
<# for(var j = 1; j <= i; j++ ) { #>
            res = comparer<#= j #>.Compare(x.Item<#= j #>, y.Item<#= j #>);
            if (res != 0) return res;
<# } #>
            return res;
        }
    }
<# } #>
}
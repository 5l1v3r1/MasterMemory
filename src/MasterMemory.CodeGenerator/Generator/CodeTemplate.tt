<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

namespace <#= Namespace #>
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::MessagePack;

    public static partial class MasterMemoryInitializer
    {
        static bool registered = false;

<# if( !UnuseUnityAttribute) { #>
        [UnityEngine.RuntimeInitializeOnLoadMethod(UnityEngine.RuntimeInitializeLoadType.BeforeSceneLoad)]
<# } #>
        public static void Register()
        {
            if(registered) return;
            registered = true;

<# foreach(var def in enumDefinitions) { #>
            MasterMemory.MasterMemoryComparer<<#= def.FullName #>>.Default = new <#= Namespace + ".Comparers." + def.FullName.Replace(".", "_") + "_Comparer" #>();
<# } #>
<# foreach(var def in keyTupleDefinitions) { var t = string.Join(", ", def.FullNames);  #>
            MasterMemory.MemoryKeyComparer.Register<<#= t #>>();
<# } #>
        }
    }

	public class MasterMemoryResolver : global::MessagePack.IFormatterResolver
    {
        public static global::MessagePack.IFormatterResolver Instance = new MasterMemoryResolver();

        MasterMemoryResolver()
        {

        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.formatter;
        }

        static class FormatterCache<T>
        {
            public static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> formatter;

            static FormatterCache()
            {
                var f = MasterMemoryResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class MasterMemoryResolverGetFormatterHelper
    {
        static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static MasterMemoryResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(<#= elementDefinitions.Length #>)
            {
<# for(var i = 0; i < elementDefinitions.Length; i++) { var x = elementDefinitions[i]; #>
                {typeof(<#= x.FullName #>[]), <#= i #> },
<# } #>
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key)) return null;

            switch (key)
            {
<# for(var i = 0; i < elementDefinitions.Length; i++) { var x = elementDefinitions[i]; #>
                case <#= i #>: return new global::MessagePack.Formatters.ArrayFormatter<<#= x.FullName #>>();
<# } #>
                default: return null;
            }
        }
    }
}

namespace <#= Namespace #>.Comparers
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;

<# foreach(var item in enumDefinitions) { #>

    public class <#= item.FullName.Replace(".", "_") + "_Comparer" #> : IComparer<<#= item.FullName #>>
    {
        public int Compare(<#= item.FullName #> x, <#= item.FullName #> y)
        {
            return ((<#= item.UnderlyingType #>)x).CompareTo((<#= item.UnderlyingType #>)y);
        }
    }

<#} #>
}

#pragma warning restore 618
#pragma warning restore 612
#pragma warning restore 414
#pragma warning restore 168